// post-book v0.0.1 e993826430e4f5b8e3df966a42b0375641f98762
// --
// Code generated by webrpc-gen@v0.11.0 with javascript generator. DO NOT EDIT.
//
// webrpc-gen -schema=./webrpc.schema.ridl -target=javascript -client -out=./src/routes/services/schema.gen.js

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "e993826430e4f5b8e3df966a42b0375641f98762"

//
// Types
//

export class User {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['id'] = _data['id']
      this._data['username'] = _data['username']
      this._data['name'] = _data['name']
      this._data['avatar'] = _data['avatar']
      this._data['created'] = _data['created']
      
    }
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  get username() {
    return this._data['username']
  }
  set username(value) {
    this._data['username'] = value
  }
  get name() {
    return this._data['name']
  }
  set name(value) {
    this._data['name'] = value
  }
  get avatar() {
    return this._data['avatar']
  }
  set avatar(value) {
    this._data['avatar'] = value
  }
  get created() {
    return this._data['created']
  }
  set created(value) {
    this._data['created'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class UserData {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['username'] = _data['username']
      this._data['name'] = _data['name']
      
    }
  }
  get username() {
    return this._data['username']
  }
  set username(value) {
    this._data['username'] = value
  }
  get name() {
    return this._data['name']
  }
  set name(value) {
    this._data['name'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Credentials {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['username'] = _data['username']
      this._data['password'] = _data['password']
      
    }
  }
  get username() {
    return this._data['username']
  }
  set username(value) {
    this._data['username'] = value
  }
  get password() {
    return this._data['password']
  }
  set password(value) {
    this._data['password'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Post {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['id'] = _data['id']
      this._data['userId'] = _data['userId']
      this._data['content'] = _data['content']
      this._data['created'] = _data['created']
      this._data['updated'] = _data['updated']
      
    }
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  get userId() {
    return this._data['userId']
  }
  set userId(value) {
    this._data['userId'] = value
  }
  get content() {
    return this._data['content']
  }
  set content(value) {
    this._data['content'] = value
  }
  get created() {
    return this._data['created']
  }
  set created(value) {
    this._data['created'] = value
  }
  get updated() {
    return this._data['updated']
  }
  set updated(value) {
    this._data['updated'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class PostUser {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['post'] = _data['post']
      this._data['user'] = _data['user']
      
    }
  }
  get post() {
    return this._data['post']
  }
  set post(value) {
    this._data['post'] = value
  }
  get user() {
    return this._data['user']
  }
  set user(value) {
    this._data['user'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class UserService {
  constructor(hostname, fetch) {
    this.path = '/rpc/UserService/'
    this.hostname = hostname
    this.fetch = (input, init) => fetch(input, init)
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  login = (args, headers) => {
    return this.fetch(
      this.url('Login'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: new User(_data.user)
        }
      })
    })
  }
  
  register = (args, headers) => {
    return this.fetch(
      this.url('Register'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: new User(_data.user)
          , errors: (_data.errors)
        }
      })
    })
  }
  
  isAuthenticated = (headers) => {
    return this.fetch(
      this.url('IsAuthenticated'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: new User(_data.user)
        }
      })
    })
  }
  
}

export class PostService {
  constructor(hostname, fetch) {
    this.path = '/rpc/PostService/'
    this.hostname = hostname
    this.fetch = (input, init) => fetch(input, init)
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  createPost = (args, headers) => {
    return this.fetch(
      this.url('CreatePost'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          errors: (_data.errors)
        }
      })
    })
  }
  
  updataPost = (args, headers) => {
    return this.fetch(
      this.url('UpdataPost'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          errors: (_data.errors)
        }
      })
    })
  }
  
  postsOfUser = (args, headers) => {
    return this.fetch(
      this.url('PostsOfUser'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: new User(_data.user)
          , posts: (_data.posts)
        }
      })
    })
  }
  
  pOstsFeed = (headers) => {
    return this.fetch(
      this.url('POstsFeed'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          posts: (_data.posts)
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
